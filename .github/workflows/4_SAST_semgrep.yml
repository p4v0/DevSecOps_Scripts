name: External SAST con semgrep

on:
  push:  # Se ejecuta en push a ramas main y develop
    branches:
      - main
      - develop
  pull_request:  # se ejecuta en pull requests de main
    branches:
      - main
  workflow_dispatch:  # Permite ejecución manual
  #schedule:
  #  - cron: '0 4 * * 1'  # Corre cada lunes a las 4 AM UTC

jobs:
  semgrep:
    name: Semgrep Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Semgrep
        run: pip install semgrep

      - name: Run Semgrep
            #semgrep scan: escanear con semgrep 
            # -config=p/ci solo escanea CI/CD, sin evaluar lenguaje
            # || true evita que devuelva código de error (<>0) parando el pipeline, sólo cuando quiero informar resultado
            # --config=auto detección de los lenguajes del proyecto y escaneo según eso
            # --json > semgrep-report.json --json > semgrep-report.json
            # Sin --error, Semgrep siempre devuelve 0, sin importar si hay findings o no.
            # Con --error || true, Semgrep primero devuelve 1 si hay findings, pero || true lo fuerza a 0
              # Si quieres capturar el código de salida original de Semgrep y hacer algo condicional con él en un script 
              # o en el workflow, usar --error || true es mejor porque te permite ver que hubo findings antes de que se "ignore" el error.
            # | jq '[.results[] | select(.extra.metadata.impact == "HIGH")]': filtrar json con solo hallazgos de impacto high
              # jq al estar en pipe con semgrep sobreescribe el código de salida con su propio código (0) y afecta el resultado de semgrep en el pipeline, entonces:
              # con tee guarda la salida completa en semgrep-full.json, sin alterar el código de salida.
              # y con ${PIPESTATUS[0]} recupera el código de salida de semgrep y lo usa como código final del script.        
        run: |
          semgrep scan --config=p/ci --config=auto --error --json | tee semgrep-full.json | jq '[.results[] | select(.extra.metadata.impact == "MEDIUM" or .extra.metadata.impact == "HIGH")]' > semgrep-report.json
          exit ${PIPESTATUS[0]}
      
      # exportar artefacto con el json de resultados de semgrep
      - name: Upload Semgrep Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-report
          path: semgrep-report.json
